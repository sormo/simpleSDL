namespace ModelData;

struct Vec3
{
    x:float;
    y:float;
    z:float;
}

struct Vec2 
{
    x:float;
    y:float;
}

struct Color
{
	r:float;
	g:float;
	b:float;
	a:float;
}

enum TextureOperation:byte
{
    // T = T1 * T2
    Multiply = 0,
    // T = T1 + T2
    Add = 0x1,
    // T = T1 - T2
    Substract = 0x2,
    // T = T1 / T2
    Divide = 0x3,
    // T = (T1 + T2) - (T1 * T2)
    SmoothAdd = 0x4,
    // T = T1 + (T2-0.5)
    SignedAdd = 0x5,
}

enum TextureMapMode:byte
{
	// A texture coordinate u|v is translated to u%1|v%1
    Wrap = 0,
    // Texture coordinates outside [0...1] are clamped to the nearest valid value.
    Clamp,
    // If the texture coordinates for a pixel are outside [0...1] the texture is not applied to that pixel
    Decal,
    // A texture coordinate u|v becomes u%1|v%1 if (u-(u%1))%2 is zero and 1-(u%1)|1-(v%1) otherwise
    Mirror,
}

table Texture
{
    path:string;
    uvIndex:uint32; // not used yet, not supported multiple uv channels
    blendFactor:float;
    operation:TextureOperation;
    mapping:TextureMapMode;
}

table Material
{
	ambient:Color;
	diffuse:Color;
	specular:Color;
	shininess:float;
	textureAmbient:[Texture];
	textureDiffuse:[Texture];
	textureSpecular:[Texture];
	textureNormal:[Texture];
	textureShininess:[Texture];
	textureHeight:[Texture];
	textureEmissive:[Texture];
	textureOpacity:[Texture];
	textureLightmap:[Texture];
}

table Mesh
{
    positions:[Vec3];
    normals:[Vec3];
    texCoords:[Vec2];
    tangents:[Vec3];
    bitangents:[Vec3];
    indices:[uint16];
    material:uint32;
}

table Model
{
    meshes:[Mesh];
    materials:[Material];
}

root_type Model;